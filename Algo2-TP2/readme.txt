La entrega de este trabajo incluirá: Los archivos .c y .h de todos los TDAs usados para su realización (lista (que incluye pila y cola), abb y heap), 2 bibliotecas con sus respectivos archivos .c y .h (funciones_varias y menus) que creé para facilitarme el trabajo, este mismo readme, el archivo juego.c que contiene a la función main para correr el juego, los archivos batallas.c y batallas.h donde programé los distintos métodos de batalla entre pokemon, los archivos de personaje y gimnasios que usé para probar mi código (personaje.txt y gimnasios.txt) y el archivo consigna que ńos decía como implementar el juego.

Para la compilación del trabajo utilicé la línea de comandos "gcc *.c -o juego -g -std=c99 -Wall -Wconversion -Wtype-limits -pedantic -Werror -O0" y para correrlo con valgrind utilicé la línea "valgrind --leak-check=full --track-origins=yes --show-reachable=yes ./juego". También se puede correr sin valgrind con la línea "./juego".

En cuanto al uso de los distintos TDAs y estructuras, además de usar un heap para almacenar los gimnasios (como dictaba la consigna), utilicé para almacenar a los entrenadores una pila ya que, por la forma en la que se nos dá el archivo (nos pone al líder de gimnasio primero a pesar de que debe ser el último entrenador a combatir) es conveniente el orden de las pilas LIFO (Last In First Out) y, al no necesitar acceder a un gimnasio en específico no era necesario utilizar una lista. Para los equipos pokemon del personaje principal y los entrenadores decidí utilizar listas ya que, al no ser muchos los pokemon que se pueden llevar a una batalla (máximo 6), estructuras mas complejas como un ABB no eran necesarias, además, para algunas funciones (como las de intercambiar o tomar prestado pokemon) era necesario acceder a elementos en distintas posiciones que el tope o el inicio y, hacer esto con una cola o una pila dificultaría mucho el trabajo ya que no hay funciones como lista_elemento_en_posición como las hay en el TDA lista. Por último, para el conjunto de pokemon obtenidos del entrenador decidí utilizar un ABB (ordenado alfabéticamente según la especie de los pokemon) porque, la cantidad de pokemon obtenidos por un entrenador es indefinida, pueden llegar a ser cientos o miles (si nos vamos a los extremos) lo cual nos facilitaría mucho tener una función de búsqueda eficiente cuando queramos agarrar pokemon del conjunto pokemon_obtenidos para llevarlos al conjunto de pokemon a combatir.